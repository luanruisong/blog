<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on anwu&#39;s blog</title>
    <link>/post/</link>
    <description>Recent content in Posts on anwu&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 25 Jan 2021 19:08:11 +0800</lastBuildDate><atom:link href="/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>First</title>
      <link>/post/first/</link>
      <pubDate>Mon, 25 Jan 2021 19:08:11 +0800</pubDate>
      
      <guid>/post/first/</guid>
      <description>Hello Hugo  aaa bbb ccc  </description>
    </item>
    
    <item>
      <title>Golang Reflect</title>
      <link>/post/golang/reflact/</link>
      <pubDate>Tue, 07 Apr 2020 21:14:01 +0800</pubDate>
      
      <guid>/post/golang/reflact/</guid>
      <description>reflect包基本基于两个基础类型 reflect.Value //值  reflect.Type //类型 value/type 的获取方法 p := struct{ Name string Value string }{ Name:&amp;#34;n&amp;#34;, Value:&amp;#34;v&amp;#34;, } t := reflect.TypeOf(p) v := reflect.ValueOf(p) value/type 可以使用kind函数获得具体类型，大致类型如下 Bool Int Int8 Int16 Int32 Int64 Uint Uint8 Uint16 Uint32 Uint64 Uintptr Float32 Float64 Complex64 Complex128 Array //数组  Chan //channel  Func //函数  Interface //  Map //map  Ptr //指针  Slice //切片  String //字符串  Struct //结构体  UnsafePointer 一、未知参数的解析 1.</description>
    </item>
    
  </channel>
</rss>
